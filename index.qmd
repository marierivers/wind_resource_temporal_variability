---
title: "Wind Resource Temporal Variability"
subtitle: "Diurnal and monthly variability of NREL Wind Toolkit Data"
date: "October 13, 2022"
author: "Marie Rivers"
editor: visual
toc-title: Contents
toc-location: left
toc-depth: 2
code-tools: 
  source: true
  toggle: true
  caption: view source code
code-block-bg: true
code-block-border-left: "#31BAE9"
---

This tool quantifies and visualizes the diurnal and monthly variability of wind resources

# About the data

```{r}
#| include: false
```

```{python}
import h5pyd
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from pyproj import Proj
import dateutil
import folium
#from IPython.display import display, Markdown
```

# Access data

```{python}
#| column: page-right
f = h5pyd.File("/nrel/wtk-us.h5", 'r', bucket="nrel-pds-hsds")
windspeed_100m_dset = f['windspeed_100m']
```

```{python}
datetime_df = f["datetime"]
datetime_df = pd.DataFrame({"datetime": datetime_df[:]},index=range(0,datetime_df.shape[0]))
datetime_df['datetime'] = datetime_df['datetime'].apply(dateutil.parser.parse)
```

```{python}
# datetime range for 2012
start_date = '2012-01-01'
end_date = '2013-01-01'
datetime_range = datetime_df.loc[(datetime_df.datetime >= start_date) & (datetime_df.datetime < end_date)].index
```

## Determine nearest timeseries for given Lat/Lon

```{python}
# This function finds the nearest x/y indices for a given lat/lon.
# Rather than fetching the entire coordinates database, which is 500+ MB, this
# uses the Proj4 library to find a nearby point and then converts to x/y indices
def indicesForCoord(f, lat_index, lon_index):
    dset_coords = f['coordinates']
    projstring = """+proj=lcc +lat_1=30 +lat_2=60 
                    +lat_0=38.47240422490422 +lon_0=-96.0 
                    +x_0=0 +y_0=0 +ellps=sphere 
                    +units=m +no_defs """
    projectLcc = Proj(projstring)
    origin_ll = reversed(dset_coords[0][0])  # Grab origin directly from database
    origin = projectLcc(*origin_ll)
    
    coords = (lon_index,lat_index)
    coords = projectLcc(*coords)
    delta = np.subtract(coords, origin)
    ij = [int(round(x/2000)) for x in delta]
    return tuple(reversed(ij))

lake_wyola = (42.501587, -72.429984)
lake_wyola_idx = indicesForCoord(f, lake_wyola[0], lake_wyola[1] )

print("y,x indices for Lake Wyola: \t\t {}".format(lake_wyola_idx))
print("Coordinates of Lake Wyola: \t {}".format(lake_wyola))
print("Coordinates of nearest point: \t {}".format(f["coordinates"][lake_wyola_idx[0]][lake_wyola_idx[1]]))
```

## Map

map of site and nearest point

```{python}
nearest_site_coords = f["coordinates"][lake_wyola_idx[0]][lake_wyola_idx[1]]

site_map = folium.Map(location = lake_wyola, zoom_start = 12)
folium.Marker(lake_wyola, popup = 'Lake Wyola').add_to(site_map)
folium.Marker(nearest_site_coords, popup = 'Nearest Site').add_to(site_map)
site_map
```

```{python}
# Get the entire 2012 timeseries data for a point near Lake Wyola
tseries = windspeed_100m_dset[min(datetime_range):max(datetime_range)+1, lake_wyola_idx[0], lake_wyola_idx[1]]
```

```{python}
# convert numpy array to pandas dataframe
windspeed_100m_df = pd.DataFrame(tseries, columns = ["windspeed_100m"], index = datetime_df.iloc[datetime_range,].datetime)
```

```{python}
windspeed_100m_df["year"] = windspeed_100m_df.index.year
windspeed_100m_df["month"] = windspeed_100m_df.index.month
windspeed_100m_df["day"] = windspeed_100m_df.index.day
windspeed_100m_df["hour"] = windspeed_100m_df.index.hour
windspeed_100m_df["day_of_year"] = windspeed_100m_df.index.dayofyear
```

# Statistical analysis

## Data exploration

Start with graph of entire year

```{python}
# site_coord_list = [(42.501587, -72.429984), (40.7128, -74.0059)]
# #site_coord_list = [(42.501587), (-72.429984)]
# site_name_list = ["Lake Wyola", "New York City"]
# site_dict = {"Lake Wyola":("42.501587", "-72.429984"), "New York City":("40.7128", "-74.0059")}
# 
# for site in site_dict:
#   print(site, " is located at ", site_dict[site])
#   lat = float(site_dict[site][0])
#   lon = float(site_dict[site][1])
#   nearest_point_idx = indicesForCoord(f, lat, lon)
#   display(Markdown("{site}"))
#   print("The site nearest to ", site, " is located at ", f["coordinates"][nearest_point_idx[0]][nearest_point_idx[1]])
#   tseries = windspeed_100m_dset[min(datetime_range):max(datetime_range)+1, nearest_point_idx[0], nearest_point_idx[1]]
#   windspeed_100m_df = pd.DataFrame(tseries, columns = ["windspeed_100m"], index = datetime_df.iloc[datetime_range,].datetime)
#   windspeed_100m_df["year"] = windspeed_100m_df.index.year
#   windspeed_100m_df["month"] = windspeed_100m_df.index.month
#   windspeed_100m_df["day"] = windspeed_100m_df.index.day
#   windspeed_100m_df["hour"] = windspeed_100m_df.index.hour
#   windspeed_100m_df["day_of_year"] = windspeed_100m_df.index.dayofyear
#   #windspeed_100m_df.head()
#   fig, ax = plt.subplots()
#   ax.plot(windspeed_100m_df.index, windspeed_100m_df["windspeed_100m"])
#   plt.show()
#   #display(Markdown(f'</div>'))
```

histogram (with line for mean and median) to get skew

Calculate the variance and standard deviation of `windspeed_100m` for each month by grouping and aggregating

```{python}
windspeed_100m_df["windspeed_100m"].hist()
plt.show()
```

## Diurnal variability

graph with for loop

## Monthly variability

which months how the greatest variability (spread) and which have the smallest spread

```{python}
windspeed_100m_df.groupby('month')['windspeed_100m'].agg([np.var, np.std])
```

what month has the most outliers (get count of outliers by month)

# Insights

When planning utility scale wind power plants, you may not be so concerned with variability and outliers as long as the wind is within the operating range of your turbines.

-   if the annual average wind speed is at least 13 mph (5.8 m/s) \*footnote 1
-   how often the wind is below the cut-in speed - 8 mph (3.6 m/s) \*footnote 2
-   how often the wind exceed the cut-out speed - 55 mph (24.6 m/s) \*footnote 2
-   does the diurnal pattern match daily electricity demands
-   does the monthly pattern match seasonal electricity demands

# Conclusions / insights

# Expanded geographic scale

# Citations

<https://www.eia.gov/electricity/gridmonitor/dashboard/electric_overview/US48/US48>
