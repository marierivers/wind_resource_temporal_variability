---
title: "Wind Resource Temporal Variability Report"
subtitle: "Diurnal and monthly variability of wind resources based on data from the NREL Wind Toolkit"
date: "`r Sys.Date()`"
author: "Marie Rivers"
format: pdf
editor: visual
toc-title: Contents
toc-location: left
toc-depth: 2
params:
  site_name: "Mount Washington"
  site_lat: "44.2705"
  site_lon: "-71.30325"
  start_date: '2012-01-01'
  end_date: '2013-01-01'
  cut_in_speed: 3.6
  cut_out_speed: 24.6
  req_annual_avg_speed: 5.8
---

```{r}
#| include: false
library(tidyverse)
library(reticulate)
library(leaflet)
library(htmltools)
```

```{python}
#| include: false
import h5pyd
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from pyproj import Proj
import dateutil
import folium
import contextily
import geopandas
from shapely.geometry import Point
```

```{r}
#| include: false
params_df_R <- data.frame(params$site_name, params$site_lat, params$site_lon, params$start_date, params$end_date, params$cut_in_speed, params$cut_out_speed, params$req_annual_avg_speed)
```

```{python}
#| include: false
params_df_py = r.params_df_R
```

```{r}
#| include: false
site_name_R <- params$site_name
site_lat_R <- params$site_lat
site_lon_R <- params$site_lon
start_date_R <- params$start_date
end_date_R <- params$end_date
cut_in_speed_R <- params$cut_in_speed
cut_out_speed_R <- params$cut_out_speed
req_annual_avg_speed_R <- params$req_annual_avg_speed
```

```{python}
#| include: false
site_name_py = params_df_py["params.site_name"][0]
site_lat_py = params_df_py["params.site_lat"][0]
site_lon_py = params_df_py["params.site_lon"][0]
start_date_py = params_df_py["params.start_date"][0]
end_date_py = params_df_py["params.end_date"][0]
cut_in_speed_py = params_df_py["params.cut_in_speed"][0]
cut_out_speed_py = params_df_py["params.cut_out_speed"][0]
req_annual_avg_speed_py = params_df_py["params.req_annual_avg_speed"][0]
```

```{python}
#| include: false
f = h5pyd.File("/nrel/wtk-us.h5", 'r', bucket="nrel-pds-hsds")
windspeed_100m_dset = f['windspeed_100m']
```

```{python}
#| include: false
datetime_df = f["datetime"]
datetime_df = pd.DataFrame({"datetime": datetime_df[:]},index=range(0,datetime_df.shape[0]))
datetime_df['datetime'] = datetime_df['datetime'].apply(dateutil.parser.parse)
```

```{python}
#| include: false
start_date = params_df_py["params.start_date"][0]
end_date = params_df_py["params.end_date"][0]
datetime_range = datetime_df.loc[(datetime_df.datetime >= start_date) & (datetime_df.datetime < end_date)].index
```

```{python}
#| include: false
site_name = params_df_py["params.site_name"][0]
site_coords = (params_df_py["params.site_lat"][0], params_df_py["params.site_lon"][0])
```

```{python}
#| include: false

def indicesForCoord(f, lat_index, lon_index):
    dset_coords = f['coordinates']
    projstring = """+proj=lcc +lat_1=30 +lat_2=60 
                    +lat_0=38.47240422490422 +lon_0=-96.0 
                    +x_0=0 +y_0=0 +ellps=sphere 
                    +units=m +no_defs """
    projectLcc = Proj(projstring)
    origin_ll = reversed(dset_coords[0][0])  # Grab origin directly from database
    origin = projectLcc(*origin_ll)
    
    coords = (lon_index,lat_index)
    coords = projectLcc(*coords)
    delta = np.subtract(coords, origin)
    ij = [int(round(x/2000)) for x in delta]
    return tuple(reversed(ij))

nearest_site = indicesForCoord(f, site_coords[0], site_coords[1] )
nearest_site_lat = f["coordinates"][nearest_site[0]][nearest_site[1]][0]
nearest_site_lon = f["coordinates"][nearest_site[0]][nearest_site[1]][1]

print("y,x indices for", site_name, ": \t\t {}".format(nearest_site))
print("Coordinates of", site_name, ": \t {}".format(site_coords))
print("Coordinates of nearest point: \t {}".format(f["coordinates"][nearest_site[0]][nearest_site[1]]))
```

# Introduction

This report provides an overview of wind resources for `r params$site_name` from `r params$start_date` to `r params$end_date`. This analysis is based on the wind speed at 100 meters dataset within the National Renewable Energy Laboratory (NREL) Wind Integration National Dataset (WIND) Toolkit.

```{python}
#| include: false
tseries = windspeed_100m_dset[min(datetime_range):max(datetime_range)+1, nearest_site[0], nearest_site[1]]
```

```{python}
#| include: false
# convert numpy array to pandas dataframe
windspeed_100m_df = pd.DataFrame(tseries, columns = ["windspeed_100m"], index = datetime_df.iloc[datetime_range,].datetime)

windspeed_100m_df["year"] = windspeed_100m_df.index.year
windspeed_100m_df["month"] = windspeed_100m_df.index.month
windspeed_100m_df["day"] = windspeed_100m_df.index.day
windspeed_100m_df["hour"] = windspeed_100m_df.index.hour
windspeed_100m_df["day_of_year"] = windspeed_100m_df.index.dayofyear
```

```{python}
#| include: false
windspeed_100m_df.to_csv("data/data_for_report_windspeed_100m_df.csv", index=True)
```

```{python}
#| echo: false
#data = pd.read_csv("data/windspeed_100m_df.csv")
```

```{r}
#| include: false
data_R <- read_csv("data/data_for_report_windspeed_100m_df.csv")
```

# Analysis

The graph below shows hourly wind speed for `r params$site_name` and the selected time range. Wind speed values are show in relation to the specified turbine cut-in and cut-out speeds.

```{python}
#| echo: false
plt.style.use("seaborn-colorblind")
#plt.style.use("ggplot")
fig, ax = plt.subplots()
#fig.set_size_inches([8, 4])
ax.plot(windspeed_100m_df.index, windspeed_100m_df["windspeed_100m"], linewidth = 0.25)
ax.set_xlabel("date")
ax.set_ylabel("wind speed at 100 meters (m/s)")
ax.set_title("Hourly Wind Speed")
plt.axhline(y=cut_in_speed_py, linewidth = 2.5, linestyle = '--', color = "black")
ax.annotate(("cut-in speed: " + str(cut_in_speed_py) + "m/s"), xy = [windspeed_100m_df.index[0], cut_in_speed_py + 1],
            fontsize = 12,
            bbox={'facecolor': 'white', 'alpha': 0.75, 'pad': 1})
plt.axhline(y=24.6, linewidth = 2.5, linestyle = '--', color = "black")
ax.annotate(("cut-out speed: " + str(cut_out_speed_py) + "m/s"), xy = [windspeed_100m_df.index[0], cut_out_speed_py + 1],
            fontsize = 12,
            bbox={'facecolor': 'white', 'alpha': 0.75, 'pad': 1})
plt.show()
```

```{python}
#| include: false
annual_average_windspeed = round(windspeed_100m_df["windspeed_100m"].mean(), 2)

if (annual_average_windspeed >= 5.8):
  above_below = "ABOVE"
else:
  above_below = "BELOW"

print("The annual average wind speed for xxx...location in 2012 was " + str(annual_average_windspeed) + " m/s.")
print("This is", above_below, "the value recommended by the U.S. Energy Information Administration.")
```

```{r}
#| include: false
annual_average_windspeed_R <- round(mean(data_R$windspeed_100m), 2)

if (annual_average_windspeed_R >= params$req_annual_avg_speed) {
  above_below_R <- "ABOVE"
} else {
  above_below_R <- "BELOW"
}
```

```{python}
#| include: false
hours_below_cutin_speed = windspeed_100m_df[windspeed_100m_df["windspeed_100m"] < 3.6].shape[0]

percent_below_cutin_speed = round((hours_below_cutin_speed / windspeed_100m_df.shape[0]) * 100, 2)

print("In 2012, wind speed was below the cut-in speed of 3.6 m/s for", f'{hours_below_cutin_speed:,}', "hours.")
print("Therefore, wind turbines could not operate", percent_below_cutin_speed, "percent of the time due to lack of wind.")
```

```{r}
#| include: false
hours_below_cutin_speed_R <- data_R %>% 
  filter(windspeed_100m < params$cut_in_speed) %>% 
  nrow()

percent_below_cutin_speed_R <- round((hours_below_cutin_speed_R / nrow(data_R)) * 100, 2)
```

```{python}
#| include: false
hours_above_cutout_speed = windspeed_100m_df[windspeed_100m_df["windspeed_100m"] > 24.6].shape[0]

percent_above_cutout_speed = round((hours_above_cutout_speed/ windspeed_100m_df.shape[0]) * 100, 2)

print("In 2012, wind speed exceeded the cut-out speed of 24.6 m/s for", f'{hours_above_cutout_speed:,}', "hours.")
print("Therefore, wind turbines could not operate", percent_above_cutout_speed, "percent of the time due to strong wind.")
```

```{r}
#| include: false
hours_above_cutout_speed_R <- data_R %>% 
  filter(windspeed_100m > params$cut_out_speed) %>% 
  nrow()

percent_above_cutout_speed_R <- round((hours_above_cutout_speed_R / nrow(data_R)) * 100, 2)
```

```{python}
#| include: false
operating_hours = windspeed_100m_df.shape[0] - hours_below_cutin_speed - hours_above_cutout_speed
operating_percent = 100 - percent_below_cutin_speed - percent_above_cutout_speed

print("In 2012, wind speeds at this location would be within the acceptable operating range of")
print("3.6 m/s to 24.6 m/s for", f'{operating_hours:,}', "hours. Turbines could operate", operating_percent, "percent of the time.")
```

```{r}
#| include: false
operating_hours_R = nrow(data_R) - hours_below_cutin_speed_R - hours_above_cutout_speed_R
operating_percent_R = round(100 - percent_below_cutin_speed_R - percent_above_cutout_speed_R, 2)
```

The annual average wind speed for `r params$site_name` was `r annual_average_windspeed_R` m/s. This is `r above_below_R` the value of `r params$req_annual_avg_speed` m/s recommended by the U.S. Energy Information Administration. Wind speed was below the cut-in speed of `r params$cut_in_speed` m/s for `r format(hours_below_cutin_speed_R, big.mark = ",")` hours. Therefore, wind turbines could not operate `r percent_below_cutin_speed_R` percent of the time due to lack of wind. Wind speed exceeded the cut-out speed of `r params$cut_out_speed` m/s for `r format(hours_above_cutout_speed_R, big.mark = ",")` hours. Therefore, wind turbines could not operate `r percent_above_cutout_speed_R` percent of the time due to stong wind. Between `r params$start_date` to `r params$end_date`, wind speeds at this location were within the acceptable operating range of `r params$cut_in_speed` m/s to `r params$cut_out_speed` m/s for `r format(operating_hours_R, big.mark = ",")` hours. Therefore, turbines could operate `r operating_percent_R` percent of the time.

# Site Map

The map below shows the location of `r params$site_name`.

```{r out.width='75%'}
#| echo: false
leaflet_df <- data.frame(location = c(site_name_R),
                         lat = c(as.numeric(site_lat_R)),
                         lon = c(as.numeric(site_lon_R)))

leaflet(leaflet_df) %>%
  setView(leaflet_df$lon, leaflet_df$lat, zoom = 10) %>%
  addTiles() %>%
  addMarkers(~as.numeric(lon), ~as.numeric(lat), label = ~location,
             labelOptions = labelOptions(noHide = TRUE, textsize = "12px"))
```

# Citations

Draxl, C., B.M. Hodge, A. Clifton, and J. McCaa. 2015. [Overview and Meteorological Validation of the Wind Integration National Dataset Toolkit (Technical Report](https://www.nrel.gov/docs/fy15osti/61740.pdf), NREL/TP-5000-61740). Golden, CO: National Renewable Energy Laboratory.

Draxl, C., B.M. Hodge, A. Clifton, and J. McCaa. 2015. "[The Wind Integration National Dataset (WIND) Toolkit.](https://www.sciencedirect.com/science/article/pii/S0306261915004237?via%3Dihub)" Applied Energy 151: 355366.

Energy.gov. “How Do Wind Turbines Survive Severe Storms?” Accessed October 11, 2022. <https://www.energy.gov/eere/articles/how-do-wind-turbines-survive-severe-storms>.

King, J., A. Clifton, and B.M. Hodge. 2014. [Validation of Power Output for the WIND Toolkit](https://www.nrel.gov/docs/fy14osti/61714.pdf) (Technical Report, NREL/TP-5D00-61714). Golden, CO: National Renewable Energy Laboratory.

“Where Wind Power Is Harnessed - U.S. Energy Information Administration (EIA).” Accessed October 11, 2022. <https://www.eia.gov/energyexplained/wind/where-wind-power-is-harnessed.php>.

