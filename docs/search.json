[
  {
    "objectID": "mrivers_presentation.html#environmental-engineering-consultant",
    "href": "mrivers_presentation.html#environmental-engineering-consultant",
    "title": "NREL Geospatial Research Scientist Interview",
    "section": "environmental engineering consultant",
    "text": "environmental engineering consultant\nmodeled drinking water distribution systems - used customer billing data to identify diunal patterns in water consumption - used diurnal patters in extended period simulation models unlike wind patterns, water use is influenced by human activities (dif patterns based on season, weekday/weekend, zoning (residential vs commercial vs industrial)) - predictive modeling\nused geospatial analyses to identify and evaluate locations from new infrastructure based on land use data and community demographics"
  },
  {
    "objectID": "mrivers_presentation.html#detour",
    "href": "mrivers_presentation.html#detour",
    "title": "NREL Geospatial Research Scientist Interview",
    "section": "Detour",
    "text": "Detour\n\n\n\nMaster of Environmental Data Science\nzz..besides going to the beach and paddle boarding with my dog, I…\nlearn geospatial analysis, statistics, and remote sensing with Python and R\n…and fell in love with the concept of reproducible open science\n\nzz..Last year my professional career took a detour\nzz..talk about why I made this decision"
  },
  {
    "objectID": "mrivers_presentation.html#report",
    "href": "mrivers_presentation.html#report",
    "title": "NREL Geospatial Research Scientist Interview",
    "section": "Report",
    "text": "Report\nThis tool creates a summary report by using a location as in input parameter.\nSo far in this presentation, I have highlighted the code used in the analysis, but when evaluating sites for utility scale wind generation, you’re more interested in the conclustions than the analysis steps.\nFor the given site, this report quickly communicates: - if the annual average wind speed is at least 13 mph (5.8 m/s) footnote 1 - how often the wind is below the cut-in speed - 8 mph (3.6 m/s) footnote 2 - how often the wind exceed the cut-out speed - 55 mph (24.6 m/s) *footnote 2 - does the diurnal pattern match daily electricity demands - does the monthly pattern match seasonal electricity demands\nThe report could be expand to evaluate a longer time frame (based on user input start/end dates) or compare multiple sites side-by-side. Note: This report only evaluates wind speed data. This report does not evaluate other variables the are important to siting wind power plants such as topography, proximity to populated areas, distance to transmission lines, bird and bat populations …xxx\nfootnote1: The U.S. Energy Information Administration recommends an annual average wind speed of at least 9 mph (4 m/s) for small wind turbines and 13 mph (5.8 m/s) for utility-scale turbines. https://www.eia.gov/energyexplained/wind/where-wind-power-is-harnessed.php#:~:text=Good%20places%20for%20wind%20turbines,)%20for%20utility%2Dscale%20turbines.\nfootnote2: https://www.energy.gov/eere/articles/how-do-wind-turbines-survive-severe-storms"
  },
  {
    "objectID": "mrivers_presentation.html#expanded-scale",
    "href": "mrivers_presentation.html#expanded-scale",
    "title": "NREL Geospatial Research Scientist Interview",
    "section": "Expanded scale",
    "text": "Expanded scale\n\n\n\n\n\n\n\n\n\nThe code below shows how to expand the geographic scale\n\nsite_coord_list = [(42.501587, -72.429984), (40.7128, -74.0059)]\n#site_coord_list = [(42.501587), (-72.429984)]\nsite_name_list = [\"Lake Wyola\", \"New York City\"]\nsite_dict = {\"Lake Wyola\":(\"42.501587\", \"-72.429984\"), \"New York City\":(\"40.7128\", \"-74.0059\")}\n\nfor site in site_dict:\n  print(site, \" is located at \", site_dict[site])\n  lat = float(site_dict[site][0])\n  lon = float(site_dict[site][1])\n  nearest_point_idx = indicesForCoord(f, lat, lon)\n  display(Markdown(f\"### {site}\"))\n  print(\"The site nearest to \", site, \" is located at \", f[\"coordinates\"][nearest_point_idx[0]][nearest_point_idx[1]])\n  tseries = windspeed_100m_dset[min(datetime_range):max(datetime_range)+1, nearest_point_idx[0], nearest_point_idx[1]]\n  windspeed_100m_df = pd.DataFrame(tseries, columns = [\"windspeed_100m\"], index = datetime_df.iloc[datetime_range,].datetime)\n  windspeed_100m_df[\"year\"] = windspeed_100m_df.index.year\n  windspeed_100m_df[\"month\"] = windspeed_100m_df.index.month\n  windspeed_100m_df[\"day\"] = windspeed_100m_df.index.day\n  windspeed_100m_df[\"hour\"] = windspeed_100m_df.index.hour\n  windspeed_100m_df[\"day_of_year\"] = windspeed_100m_df.index.dayofyear\n  #windspeed_100m_df.head()\n  fig, ax = plt.subplots()\n  ax.plot(windspeed_100m_df.index, windspeed_100m_df[\"windspeed_100m\"])\n  plt.show()\n  display(Markdown(f'</div>'))"
  },
  {
    "objectID": "mrivers_presentation.html#project-goal",
    "href": "mrivers_presentation.html#project-goal",
    "title": "NREL Geospatial Research Scientist Interview",
    "section": "Project goal",
    "text": "Project goal\nImprove the usability of snow data through web based visualizations and tutorials snow!\nThe"
  },
  {
    "objectID": "mrivers_presentation.html#project-overview",
    "href": "mrivers_presentation.html#project-overview",
    "title": "NREL Geospatial Research Scientist Interview",
    "section": "Project overview",
    "text": "Project overview\n\nstep 1\nstep 2\nstep 3"
  },
  {
    "objectID": "mrivers_presentation.html#level-2-header",
    "href": "mrivers_presentation.html#level-2-header",
    "title": "NREL Geospatial Research Scientist Interview",
    "section": "level 2 header",
    "text": "level 2 header\nnfdfnkdlasa"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Wind Resource Temporal Variability",
    "section": "",
    "text": "This tool uses statistical analyses and visualizations to explore the diurnal and monthly variability of wind resources at Mount Washington in New Hampshire using data from the National Renewable Energy Laboratory (NREL) Wind Integration National Dataset (WIND) Toolkit. Datasets within this tool include meteorological conditions such as temperature, pressure, relative humidity, wind direction, and wind speed. Hourly data is available for the continental United States from 2007 to 2013. This analysis used the wind speed at 100 meters dataset for the year 2012."
  },
  {
    "objectID": "index.html#determine-nearest-timeseries-for-given-latlon",
    "href": "index.html#determine-nearest-timeseries-for-given-latlon",
    "title": "Wind Resource Temporal Variability",
    "section": "Determine nearest timeseries for given Lat/Lon",
    "text": "Determine nearest timeseries for given Lat/Lon\nThe file structure organizes the data within a 2 kilometer x 2 kilometer grid. The code below takes the latitude/longitude coordinates of an individual site and finds the indices and coordinates of the nearest site within the dataset.\nLatitude and longitude coordinates are in a modified Lambert Conic projection.\n\n# enter site specific info here\nsite_name = \"Mount Washington\"\nsite_coords = (44.27, -71.3)\n\n\n# This function finds the nearest x/y indices for a given lat/lon.\n# Rather than fetching the entire coordinates database, which is 500+ MB, this\n# uses the Proj4 library to find a nearby point and then converts to x/y indices\n\ndef indicesForCoord(f, lat_index, lon_index):\n    dset_coords = f['coordinates']\n    projstring = \"\"\"+proj=lcc +lat_1=30 +lat_2=60 \n                    +lat_0=38.47240422490422 +lon_0=-96.0 \n                    +x_0=0 +y_0=0 +ellps=sphere \n                    +units=m +no_defs \"\"\"\n    projectLcc = Proj(projstring)\n    origin_ll = reversed(dset_coords[0][0])  # Grab origin directly from database\n    origin = projectLcc(*origin_ll)\n    \n    coords = (lon_index,lat_index)\n    coords = projectLcc(*coords)\n    delta = np.subtract(coords, origin)\n    ij = [int(round(x/2000)) for x in delta]\n    return tuple(reversed(ij))\n\nnearest_site = indicesForCoord(f, site_coords[0], site_coords[1] )\n\nprint(\"y,x indices for\", site_name, \": \\t\\t {}\".format(nearest_site))\n\ny,x indices for Mount Washington :       (1258, 2423)\n\nprint(\"Coordinates of\", site_name, \": \\t {}\".format(site_coords))\n\nCoordinates of Mount Washington :    (44.27, -71.3)\n\nprint(\"Coordinates of nearest point: \\t {}\".format(f[\"coordinates\"][nearest_site[0]][nearest_site[1]]))\n\nCoordinates of nearest point:    (44.265121, -71.280396)"
  },
  {
    "objectID": "index.html#map",
    "href": "index.html#map",
    "title": "Wind Resource Temporal Variability",
    "section": "Map",
    "text": "Map\nThis map shows the location of Mount Washington and the nearest point from the WIND Toolkit.\n\nnearest_site_coords = f[\"coordinates\"][nearest_site[0]][nearest_site[1]]\n\nsite_map = folium.Map(location = site_coords, zoom_start = 10)\nfolium.Marker(site_coords, popup = site_name).add_to(site_map)\n\n<folium.map.Marker object at 0x7fcc51fb3a60>\n\nfolium.Marker(nearest_site_coords, popup = 'Nearest Site').add_to(site_map)\n\n<folium.map.Marker object at 0x7fcc51fb3850>\n\nsite_map\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "index.html#timeseries",
    "href": "index.html#timeseries",
    "title": "Wind Resource Temporal Variability",
    "section": "Timeseries",
    "text": "Timeseries\n\n# Get the entire 2012 timeseries data for a point near the site\ntseries = windspeed_100m_dset[min(datetime_range):max(datetime_range)+1, nearest_site[0], nearest_site[1]]"
  },
  {
    "objectID": "index.html#convert-to-pandas-dataframe",
    "href": "index.html#convert-to-pandas-dataframe",
    "title": "Wind Resource Temporal Variability",
    "section": "Convert to pandas dataframe",
    "text": "Convert to pandas dataframe\n\n# convert numpy array to pandas dataframe\nwindspeed_100m_df = pd.DataFrame(tseries, columns = [\"windspeed_100m\"], index = datetime_df.iloc[datetime_range,].datetime)\n\nwindspeed_100m_df[\"year\"] = windspeed_100m_df.index.year\nwindspeed_100m_df[\"month\"] = windspeed_100m_df.index.month\nwindspeed_100m_df[\"day\"] = windspeed_100m_df.index.day\nwindspeed_100m_df[\"hour\"] = windspeed_100m_df.index.hour\nwindspeed_100m_df[\"day_of_year\"] = windspeed_100m_df.index.dayofyear"
  },
  {
    "objectID": "index.html#aggregate-data",
    "href": "index.html#aggregate-data",
    "title": "Wind Resource Temporal Variability",
    "section": "Aggregate data",
    "text": "Aggregate data\nExpand the chunks below to code used to aggregate the data for the statistical analysis and visualizations.\n\n\nfunctions to calculate quantiles\ndef quantile25(column):\n    return column.quantile(0.25)\n\ndef quantile50(column):\n    return column.quantile(0.50)\n\ndef quantile75(column):\n    return column.quantile(0.75)\n\n\n\n\ncreate dataframe of average wind speed for each hour\nhourly_avg = windspeed_100m_df.groupby(\"hour\")[\"windspeed_100m\"].agg([\"mean\", \"std\", quantile25, quantile50, quantile75])\nhourly_avg[\"coef_of_variation\"] = hourly_avg[\"std\"] / hourly_avg[\"mean\"]\nhourly_avg = hourly_avg.reset_index()\nhourly_avg\n\n\n    hour       mean       std  ...  quantile50  quantile75  coef_of_variation\n0      0  12.387863  6.712486  ...   12.079224   16.777550           0.541860\n1      1  12.496613  6.747195  ...   12.189095   16.737114           0.539922\n2      2  12.483580  6.864682  ...   12.457657   16.932434           0.549897\n3      3  12.368402  6.868386  ...   12.387463   16.807304           0.555317\n4      4  12.149085  6.715096  ...   12.137211   16.203804           0.552724\n5      5  12.089607  6.757089  ...   11.679436   16.223640           0.558917\n6      6  12.063992  6.767124  ...   11.577194   16.171759           0.560936\n7      7  11.949455  6.829232  ...   11.659599   16.408279           0.571510\n8      8  11.912717  6.842067  ...   11.658073   16.460922           0.574350\n9      9  11.857375  6.854141  ...   11.786247   16.541031           0.578049\n10    10  11.772923  6.822314  ...   11.648918   16.632591           0.579492\n11    11  11.567924  6.916491  ...   11.149940   16.528061           0.597902\n12    12  11.485174  6.983140  ...   10.873745   16.576889           0.608013\n13    13  11.193480  7.015599  ...   10.452591   16.370131           0.626758\n14    14  10.965184  6.908545  ...    9.828484   16.105377           0.630044\n15    15  10.770842  6.734104  ...    9.978027   15.614035           0.625216\n16    16  10.711322  6.503323  ...    9.938354   15.481277           0.607145\n17    17  10.796182  6.390775  ...   10.338146   15.315712           0.591948\n18    18  11.041163  6.356149  ...   10.965302   15.147865           0.575677\n19    19  11.236665  6.327993  ...   10.916473   15.860472           0.563156\n20    20  11.501818  6.368603  ...   11.233864   16.019165           0.553704\n21    21  11.688181  6.476167  ...   11.325417   15.934477           0.554078\n22    22  11.857159  6.595519  ...   11.757256   16.149633           0.556248\n23    23  12.122286  6.761561  ...   11.639763   16.821800           0.557779\n\n[24 rows x 7 columns]\n\n\n\n\ncreate dataframe of average wind speed for each hour by month\nhourly_avg_by_month = windspeed_100m_df.groupby([\"hour\", \"month\"]).mean()\nhourly_avg_by_month = hourly_avg_by_month.reset_index().pivot(index = \"hour\", columns = str(\"month\"), values = \"windspeed_100m\")\n#hourly_avg_by_month = hourly_avg_by_month.reset_index()\nhourly_avg_by_month.columns = hourly_avg_by_month.columns.astype(str)\nhourly_avg_by_month\n\n\nmonth          1          2          3  ...         10         11         12\nhour                                    ...                                 \n0      16.933540  17.768402  12.863748  ...  12.589771  11.489303  12.568311\n1      16.990442  17.863747  12.890527  ...  13.027860  11.083611  12.639684\n2      17.024899  17.666428  12.944869  ...  13.207230  11.067130  12.651399\n3      17.247192  17.689476  12.414536  ...  13.030813  10.995311  12.727105\n4      17.087215  17.182659  12.194508  ...  13.004232  10.831832  12.852821\n5      17.018696  16.680576  12.230538  ...  13.020475  10.534380  13.284904\n6      17.183693  16.345924  12.323276  ...  12.886096  10.764489  13.709111\n7      17.117733  15.907930  12.483448  ...  12.697079  11.061027  13.874207\n8      16.510416  15.630319  12.478133  ...  12.782234  10.986664  13.958576\n9      16.224230  14.956069  12.820728  ...  12.837562  10.806298  13.945088\n10     15.666430  14.856516  13.037803  ...  12.731142  10.553198  14.017447\n11     14.896872  14.635941  13.285397  ...  12.627771  10.413526  13.756956\n12     14.652528  14.686454  13.125913  ...  12.540449  10.444757  14.005436\n13     14.283154  15.064252  12.662621  ...  12.183875  10.350760  13.978954\n14     14.082422  14.700345  11.951934  ...  11.972903  10.341604  13.984173\n15     13.695034  14.202894  11.388129  ...  11.842462  10.112512  13.589106\n16     13.261769  14.114180  11.162096  ...  11.506167   9.805394  13.529741\n17     13.409145  14.211418  11.115136  ...  11.489726   9.680267  13.345547\n18     13.923725  14.917131  11.398171  ...  11.475059   9.735913  13.254682\n19     14.442245  15.225474  11.321973  ...  11.339201   9.865414  13.465160\n20     15.106761  15.462886  11.344321  ...  11.899364  10.335398  13.506213\n21     16.151182  16.114824  11.736927  ...  12.064952  10.867031  13.360314\n22     16.673346  16.536507  11.866975  ...  12.465039  11.337117  12.999310\n23     17.079733  17.003756  12.498806  ...  12.532082  11.286151  12.948414\n\n[24 rows x 12 columns]\n\n\n\n\ncreate dataframe of average wind speed for each month\nmonthly_avg = windspeed_100m_df.groupby(\"month\")[\"windspeed_100m\"].agg([\"mean\", \"std\", quantile25, quantile50, quantile75]).reset_index()\nmonthly_avg[\"coef_of_variation\"] = monthly_avg[\"std\"] / monthly_avg[\"mean\"]\nmonthly_avg\n\n\n    month       mean       std  ...  quantile50  quantile75  coef_of_variation\n0       1  15.694266  6.280080  ...   15.463730   19.280067           0.400151\n1       2  15.809338  7.093691  ...   16.272469   20.300148           0.448703\n2       3  12.230855  6.782397  ...   11.641289   17.367319           0.554532\n3       4  13.519631  6.016217  ...   14.194160   17.768639           0.444999\n4       5   9.106350  5.020830  ...    8.146919   12.250893           0.551355\n5       6   9.355852  5.079520  ...    8.920563   12.926880           0.542924\n6       7   9.863119  4.986994  ...   10.315254   13.594467           0.505620\n7       8   8.775630  5.372412  ...    8.024841   12.482071           0.612197\n8       9   9.591659  5.641614  ...    8.610794   13.949249           0.588179\n9      10  12.406398  7.392600  ...   12.508011   17.732780           0.595870\n10     11  10.614545  7.581538  ...    9.950562   16.341898           0.714259\n11     12  13.414694  7.394247  ...   12.627033   18.723869           0.551205\n\n[12 rows x 7 columns]\n\n\n\n\ncalculate moving averages\n# 24 hour moving average\nwindow_size_24hr = 24\n\n# Get the window of series of observations for specified window size\nwindows_24hr = windspeed_100m_df.rolling(window_size_24hr)\n\n# Create a series of moving averages for each window\nmoving_averages_24hr = windows_24hr.mean()\n\n#10 day moving average\nwindow_size_10day = 240\nwindows_10day = windspeed_100m_df.rolling(window_size_10day)\nmoving_averages_10day = windows_10day.mean()\n\n# 30 day moving average\nwindow_size_30day = 720\nwindows_30day = windspeed_100m_df.rolling(window_size_30day)\nmoving_averages_30day = windows_30day.mean()"
  },
  {
    "objectID": "index.html#insights",
    "href": "index.html#insights",
    "title": "Wind Resource Temporal Variability",
    "section": "Insights",
    "text": "Insights\nvalues related to min/max turbine requirements…no hlines here…save that for report and presentation…just focus on variability how diurnal pattern matches electricity demand curves"
  },
  {
    "objectID": "index.html#diurnal-variability",
    "href": "index.html#diurnal-variability",
    "title": "Wind Resource Temporal Variability",
    "section": "Diurnal variability",
    "text": "Diurnal variability\nxxx…talk about the black line and mention which lines are above and below it\n\n\ncode to graph hourly averages for each month\nfig = go.Figure([\n    go.Scatter(y = hourly_avg_by_month['1'], x = hourly_avg_by_month.index, \n              mode = 'lines', legendrank = 1, \n              name = 'January', line=dict(color='#DC050C', width=2)),\n    go.Scatter(y = hourly_avg_by_month['2'], x = hourly_avg_by_month.index,\n              mode = 'lines+markers', legendrank = 2, \n              name = 'February', line=dict(color='#E8601c', width=2)),\n    go.Scatter(y = hourly_avg_by_month['3'], x = hourly_avg_by_month.index, \n              mode = 'lines', legendrank = 3, \n              name = 'March', line=dict(color='#f4a736', width=2)),\n    go.Scatter(y = hourly_avg_by_month['4'], x = hourly_avg_by_month.index, \n              mode = 'lines+markers', legendrank = 4, \n              name = 'April', line=dict(color='#f7f056', width=2)),\n    go.Scatter(y = hourly_avg_by_month['5'], x = hourly_avg_by_month.index, \n              mode = 'lines', legendrank = 5, \n              name = 'May', line=dict(color='#cae0ab', width=2)),\n    go.Scatter(y = hourly_avg_by_month['6'], x = hourly_avg_by_month.index, \n              mode = 'lines+markers', legendrank = 6, \n              name = 'June', line=dict(color='#4eb265', width=2)),\n    go.Scatter(y = hourly_avg_by_month['7'], x = hourly_avg_by_month.index, \n              mode = 'lines', legendrank = 7, \n              name = 'July', line=dict(color='#7bafde', width=2)),\n    go.Scatter(y = hourly_avg_by_month['8'], x = hourly_avg_by_month.index, \n              mode = 'lines+markers', legendrank = 8, \n              name = 'August', line=dict(color='#5289c7', width=2)),\n    go.Scatter(y = hourly_avg_by_month['9'], x = hourly_avg_by_month.index, \n              mode = 'lines', legendrank = 9, \n              name = 'September', line=dict(color='#1965b0', width=2)),\n    go.Scatter(y = hourly_avg_by_month['10'], x = hourly_avg_by_month.index, \n              mode = 'lines+markers', legendrank = 10, \n              name = 'October', line=dict(color='#882e72', width=2)),\n    go.Scatter(y = hourly_avg_by_month['11'], x = hourly_avg_by_month.index, \n              mode = 'lines', legendrank = 11, \n              name = 'November', line=dict(color='#ae76a3', width=2)),\n    go.Scatter(y = hourly_avg_by_month['12'], x = hourly_avg_by_month.index, \n              mode = 'lines+markers', legendrank = 12, \n              name = 'December', line=dict(color='#d1bbd7', width=2)),\n    go.Scatter(name = 'annual mean', y = hourly_avg['mean'], x = hourly_avg['hour'], mode = 'lines',\n              line = dict(color = \"black\", width = 4))\n\n])\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"hour\",\n        titlefont=dict(size=16),\n        dtick = 4),\n    yaxis=dict(\n        title_text=\"windspeed (m/s)\",\n        titlefont=dict(size=16)),\n    title={\n        'text': \"Average Hourly Wind Speed by Month\",\n        'y':0.99,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    margin=dict(l=20, r=20, t=20, b=20),\n    paper_bgcolor=\"#FFFFFF\",\n    plot_bgcolor='#f5f5f5'\n)"
  },
  {
    "objectID": "index.html#monthly-variability",
    "href": "index.html#monthly-variability",
    "title": "Wind Resource Temporal Variability",
    "section": "Monthly variability",
    "text": "Monthly variability\nwhich months how the greatest variability (spread) and which have the smallest spread\n\nwindspeed_100m_df.groupby('month')['windspeed_100m'].agg([np.var, np.std])\n\n             var       std\nmonth                     \n1      39.439404  6.280080\n2      50.320457  7.093691\n3      46.000908  6.782397\n4      36.194870  6.016217\n5      25.208738  5.020830\n6      25.801525  5.079520\n7      24.870111  4.986994\n8      28.862816  5.372412\n9      31.827808  5.641614\n10     54.650532  7.392600\n11     57.479713  7.581538\n12     54.674892  7.394247\n\n\nNovember has the greatest variability, while May has the lowest variability.\nwhat month has the most outliers (get count of outliers by month)"
  },
  {
    "objectID": "void/about.html",
    "href": "void/about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "void/index.html",
    "href": "void/index.html",
    "title": "Wind Resource Temporal Variability",
    "section": "",
    "text": "About the data\n\n#%matplotlib inline\n# import h5pyd\n# import numpy as np\n# import pandas as pd\n# import matplotlib.pyplot as plt\n# import matplotlib.image as mpimg\n# from pyproj import Proj\n# import dateutil\n\n\n\nGet the data\n\n# f = h5pyd.File(\"/nrel/wtk-us.h5\", 'r', bucket=\"nrel-pds-hsds\")\n# list(f)\n\n\n#windspeed_100m_df = pd.read_csv(\"data/windspeed_100m_df.csv\")\n\n\n\nStatistical analysis\n\n\nConclusions / insights\n\n\nExpanded geographic scale\n\n\nCitations"
  }
]